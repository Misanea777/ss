using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using VulnerabilityScanner.Backend.Executors;
using VulnerabilityScanner.Backend.Policies;

namespace VulnerabilityScanner
{
    public class Controller
    {
        public List<Policy> currentPolicies = new List<Policy>();
        public List<Policy> currentDisplPolicies;

        public string[] getParsedFilesDir()
         {
            var path = System.IO.Path.GetDirectoryName(
                System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Substring(6);
               return Directory.GetFiles(path, "*.xml");
        }

        public void displayPolicies(List<Policy> policies, TreeView polTree)
        {
            polTree.Nodes.Clear();

            foreach(Policy policy in policies)
            {
                TreeNode node = new TreeNode(policy.ToString());
                if (node.Text.Contains(RESULT.FAILED.ToString())) node.ForeColor = Color.Red;
                if (node.Text.Contains(RESULT.PASSED.ToString())) node.ForeColor = Color.Green;
                if (node.Text.Contains(RESULT.NOT_APLIED.ToString())) node.ForeColor = Color.DarkGray;
                
                polTree.Nodes.Add(node);
            }
            currentDisplPolicies = policies;
        }

        public void getPoliciesfromXml(string path)
        {
            XmlDocument uploadedDoc = new XmlDocument();
            uploadedDoc.Load(path);
            currentPolicies = Serializer.deserealizeFromXml(uploadedDoc);
        }

        public void importFromAudit(string path, string name)
        {
            XmlDocument doc;
            doc = Serializer.fromAuditToXml(path);
            doc.Save(name + ".xml");
        }

        public void updatePolicyComBox(ComboBox policyCombox)
        {
            policyCombox.Items.Clear();
            string[] policiesList = getParsedFilesDir();
            foreach (string s in policiesList)
            {
                string name = Path.GetFileName(s);
                policyCombox.Items.Add(name.Substring(0, name.Length - 4)); 
            }
        }

        public void scan(List<Policy> policies)
        {
            CommandExecutor.ExecuteCommand("secedit.exe /export /cfg extracted_pol.inf");
            var file = IniFile.Load("extracted_pol.inf");
            Scaner.scan(file, policies);
        }

        public List<Policy> getListFromSearch(string keyword)
        {
            List<Policy> result = new List<Policy>();
            foreach(Policy policy in currentPolicies)
            {
                if (policy.ToString().Contains(keyword)) result.Add(policy);
            }
            return result;
        }
    }
}
